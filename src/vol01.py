""" This volume is for the problems from 1 to 50 """
import math


def prob01(top: int, div_list: list[int]) -> int:
    """ Problem 01 - Multiples of 3 or 5

    If we list all the natural numbers below 10 that are multiples of 3 or 5,
    we get 3, 5, 6 and 9. The sum of these multiples is 23.

    Find the sum of all the multiples of 3 or 5 below 1000.
    """
    # my note: suppose div_list always has 2 elements

    tot = 0
    lcm = div_list[0] * div_list[1]  # Least common multiple

    for div in div_list:
        d_len = (top - 1) // div  # NOT inclusive

        tot += int(div * (1 + d_len) * d_len / 2)

    lcm_len = (top - 1) // lcm
    return tot - int(lcm * (1 + lcm_len) * lcm_len / 2)


def prob02(top: int) -> int:
    """ Problem 02 - Even Fibonacci Numbers

    Each new term in the Fibonacci sequence is generated by adding the
    previous two terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not
    exceed four million, find the sum of the even-valued terms.
    """
    # my note:
    # 1. the Fibonacci numbers repeat a pattern as below:
    # odd, odd, even, odd, odd, even, ...
    # 2. if the Fibonacci series is noted as f1, f2, f3, ..., and from any
    # Fibonacci number fx, picking one number from every 3 numbers, to make
    # a new series noted as g1 = fx, g2 = f(x+3), g3 = f(x+6), ..., then the
    # new series will hold this:
    # gx = g(x-2) + 4 * g(x-1)
    # The series of all even Fibonacci numbers also follow above rule

    fib_even_0, fib_even_1 = 2, 8  # the first even Fibonacci number
    tot = fib_even_0

    while fib_even_1 <= top:
        tot += fib_even_1
        fib_even_0, fib_even_1 = fib_even_1, fib_even_0 + 4 * fib_even_1
        # see note 2

    return tot


def prob03(tgt: int) -> int:
    """ Problem 03 - Largest Prime Factor
    
    The prime factors of 13195 are 5, 7, 13 and 29.
    What is the largest prime factor of the number 600851475143?
    """
    if tgt <= 3:
        return tgt

    factors = [1]
    tgt_curr = tgt
    factor_try = 2
    while tgt_curr % factor_try == 0:
        factors.append(factor_try)
        tgt_curr = int(tgt_curr / factor_try)

    factor_try = 3
    while factor_try <= math.ceil(math.sqrt(tgt_curr)):
        while tgt_curr % factor_try == 0:
            factors.append(factor_try)
            tgt_curr = int(tgt_curr / factor_try)
        factor_try += 2
    factors.append(tgt_curr)

    return factors[-1]


def prob04(num1_dig: int, num2_dig: int) -> set[int, int, int]:
    """ Problem 04 - Largest Palindrome Product

    A palindromic number reads the same both ways. The largest palindrome made
    from the product of two 2-digit numbers is 9009 = 91 * 99.

    Find the largest palindrome made from the product of two 3-digit numbers.
    """
    def is_palindromic(num: int) -> bool:
        num_str = str(num)
        for pos in range(math.ceil(len(num_str) / 2)):
            if num_str[pos] != num_str[-1 - pos]:
                return False
        return True

    num1_min = 10 ** (num1_dig - 1)
    num1_max = 10 ** num1_dig - 1
    num2_min = 10 ** (num2_dig - 1)
    num2_max = 10 ** num2_dig - 1

    p_rst = num1_rst = num2_rst = 1
    for num1 in range(num1_max, num1_min - 1, -1):
        for num2 in range(num2_max, num2_min - 1, -1):
            p_test = num1 * num2
            if is_palindromic(p_test):
                if p_test > p_rst:
                    p_rst = p_test
                    num1_rst = num1
                    num2_rst = num2
            else:
                continue

    return (p_rst, num1_rst, num2_rst)


def prob05():
    """ Problem 05 - Smallest Multiple
    
    2520 is the smallest number that can be divided by each of the
    numbers from 1 to 10 without any remainder.

    What is the smallest positive number that is evenly divisible by
    all of the numbers from 1 to 20?
    """
    pass


def prob06(tgt: int) -> int:
    """ Problem 06 - Sum Square Difference

    The sum of the squares of the first ten natural numbers is,
    1 ** 2 + 2 ** 2 + ... + 10 ** 2 = 385.
    The square of the sum of the first ten natural numbers is,
    (1 + 2 + ... + 10) ** 2 = 55 ** 2 = 3025.
    Hence the difference between the sum of the squares of the first ten
    natural numbers and the square of the sum is
    3025 âˆ’ 385 = 2640.

    Find the difference between the sum of the squares of the first one
    hundred natural numbers and the square of the sum.
    """
    # Let's express f(n) = 1 ** 2 + 2 ** 2 + ... + n ** 2 in the form of
    # f(n) = k1 * n ** 3 + k2 * n ** 2 + k3 * n + k4
    # It can be proven that
    # f(n) = (2 * n ** 3 + 3 * n ** 2 + n) / 6 = n * (n + 1) * (2 * n + 1) / 6

    sum_of_sq = int(n * (n + 1) * (2 * n + 1) / 6)
    sq_of_sum = int(((1 + n) * n / 2) ** 2)

    return sq_of_sum - sum_of_sq


def main():
    """ main funcion """
    print(f'Answer to problem 01: {prob01(top=1_000, div_list=[3, 5])}')
    print(f'Answer to problem 02: {prob02(top=4_000_000)}')
    print(f'Answer to problem 03: {prob03(tgt=600_851_475_143)}')


if __name__ == '__main__':
    main()
