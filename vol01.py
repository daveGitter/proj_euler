""" This volume is for the problems from 1 to 50 """

def prob01(top: int = 10, div: list[int] = [3, 5]) -> int:
    """ Problem 01 - Multiples of 3 or 5

    If we list all the natural numbers below 10 that are multiples of 3 or 5,
    we get 3, 5, 6 and 9. The sum of these multiples is 23.

    Find the sum of all the multiples of 3 or 5 below 1000.
    """
    # my note: suppose div always has 2 elements

    tot = 0
    lcm = div[0] * div[1]  # Least common multiple

    for d in div:
        d_len = (top - 1) // d  # NOT inclusive

        tot += int(d * (1 + d_len) * d_len / 2)

    lcm_len = (top - 1) // lcm
    return tot - int(lcm * (1 + lcm_len) * lcm_len / 2)


def prob02(top: int) -> int:
    """ Problem 02 - Even Fibonacci Numbers

    Each new term in the Fibonacci sequence is generated by adding the
    previous two terms. By starting with 1 and 2, the first 10 terms will be:
    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not
    exceed four million, find the sum of the even-valued terms.
    """
    # my note: 
    # 1. the Fibonacci numbers repeat a pattern as below:
    # odd, odd, even, odd, odd, even, ...
    # 2. if the Fibonacci series is noted as f1, f2, f3, ..., and from any 
    # Fibonacci number fx, picking one number from every 3 numbers, to make
    # a new series noted as g1 = fx, g2 = f(x+3), g3 = f(x+6), ..., then the
    # new series will hold this:
    # gx = g(x-2) + 4 * g(x-1)
    # The series of all even Fibonacci numbers also follow above rule

    fib_even_0, fib_even_1 = 2, 8  # the first even Fibonacci number
    tot = fib_even_0

    while fib_even_1 <= top:
        tot += fib_even_1
        fib_even_0, fib_even_1 = fib_even_1, fib_even_0 + 4 * fib_even_1
        # see note 2

    return tot


def prob03(num: int = 600851475143) -> int:
    """ Problem 03 - Largest Prime Factor
    
    The prime factors of 13195 are 5, 7, 13 and 29.
    What is the largest prime factor of the number 600851475143?
    """
    def is_prime(num: int) -> bool:
        return False

    pass


def main():
    print(f'Answer to problem 01: {prob01(1_000)}')
    print(f'Answer to problem 02: {prob02(4_000_000)}')


if __name__ == '__main__':
    main()
